import logging
from aiogram import F, Router, Bot
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove
import json

from datetime import datetime, timedelta
import app.api as api
from config import API_KEY_GEOCODER, API_KEY_2GIS
import app.keyboards as kb
import app.database.requests as rq
from app.database.requests import async_session, parse_time, calc_notification_time

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger


router = Router()

async def send_scheduled_message(bot, chat_id, text):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤—ã–∑–æ–≤–µ—Ç—Å—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º)."""
    await bot.send_message(chat_id, text)

# TODO:
# –†–∞–±–æ—Ç–∞ —Å –≤—Ä–µ–º–µ–Ω–µ–º: –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –±—ã–ª–æ –±–æ–ª—å—à–µ –Ω—ã–Ω–µ—à–Ω–µ–≥–æ, —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü–æ–º–µ—á–∞—Ç—å –ø—Ä–æ—à–µ–¥—à–∏–µ –ø–æ–µ–∑–¥–∫–∏
# –ö—Ä–∞—Å–∏–≤—ã–µ –∏–∫–æ–Ω–∫–∏
# –ï—Å–ª–∏ –ø–æ–µ–∑–¥–æ–∫ –º–Ω–æ–≥–æ, –∏—Ö –Ω–µ–ª—å–∑—è –ø–æ–º–µ—Å—Ç–∏—Ç—å –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
# –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–º
# 

class NewRideStates(StatesGroup):
    location = State()
    destination = State()
    destination_input = State()
    destination_coords = State()
    arrival_time = State()
    transport = State()
    transport_api_format = State()
    notify_time_delta = State()
    ride_time = State()

choose_mode = State()
choose_notification_buffer = State()

class EditStates(StatesGroup):
    ride_id = State()
    parameter_to_edit = State()
    location = State()
    destination = State()
    arrival_time = State()
    transport = State()
    transport_api_format = State()
    notify_time_delta = State()


rides = {}
user_coordinates = {}



@router.message(CommandStart())
@router.message(choose_mode, F.text == "–ù–∞–∑–∞–¥")
@router.message(choose_notification_buffer, F.text == "–ù–∞–∑–∞–¥")
async def cmd_start(message: Message, state:FSMContext):
    user_id = message.from_user.id
    logging.info("CHAT ID: " + str(message.chat.id))
    async with async_session() as session:
        async with session.begin():
            user = await rq.get_user_by_tg_id(user_id, session=session)
        if not user:
            await  rq.add_user(user_id, session=session)
    await state.clear()
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! —ç—Ç–æ –±–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–µ–∑–¥–∫–∞—Ö üó∫Ô∏è\n\n–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é", reply_markup=kb.main)


@router.message(F.text == "–ú–æ–∏ –ø–æ–µ–∑–¥–∫–∏")
async def cmd_my_rides(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    async with async_session() as session:
        user_rides = await rq.get_user_rides(user_id, session)

    if not user_rides:
        await message.answer(
            '–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫.\n–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–æ–µ–∑–¥–∫—É, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é "–ù–æ–≤–∞—è –ø–æ–µ–∑–¥–∫–∞"',
            reply_markup=kb.main
        )
        return

    answer = '–í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏:\n'
    old_rides = [ride for ride in user_rides if ride.arrival_time <= datetime.now()]
    for count, ride in enumerate(user_rides, start=1):
        if ride in old_rides:
            answer += (
        f"\n{count}. –ü–†–û–®–ï–î–®–ê–Ø –ü–û–ï–ó–î–ö–ê\n‚è´ –ú–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {ride.location_text}\n"
        f"‚è¨ –ú–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {ride.destination_text}\n"
        f"üïë –í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è: {ride.arrival_time}\n"
        f"üõû –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ: {ride.transport}\n"
        f"üîî –í—Ä–µ–º—è –¥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {ride.notify_time_delta} –º–∏–Ω—É—Ç(—ã)\n"
        f"üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç: {ride.path}\n"
        f"‚åõ –î–æ—Ä–æ–≥–∞ –∑–∞–π–º–µ—Ç: {ride.ride_time} –º–∏–Ω—É—Ç(—ã)\n")
        else:
            answer += (
        f"\n{count}.\n‚è´ –ú–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {ride.location_text}\n"
        f"‚è¨ –ú–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {ride.destination_text}\n"
        f"üïë –í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è: {ride.arrival_time}\n"
        f"üõû –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ: {ride.transport}\n"
        f"üîî –í—Ä–µ–º—è –¥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {ride.notify_time_delta} –º–∏–Ω—É—Ç(—ã)\n"
        f"üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç: {ride.path}\n"
        f"‚åõ –î–æ—Ä–æ–≥–∞ –∑–∞–π–º–µ—Ç: {ride.ride_time} –º–∏–Ω—É—Ç(—ã)\n")
        if count % 3 == 0:
            await message.answer(answer, reply_markup=kb.edit_delete_back)
    await message.answer(answer, reply_markup=kb.edit_delete_back)


    

@router.message(choose_mode, F.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
async def edit_ride(message: Message, state: FSMContext):
     await state.update_data(choose_mode="edit")
     await state.set_state(EditStates.ride_id)
     await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–µ–∑–¥–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è‚úèÔ∏è", reply_markup=ReplyKeyboardRemove())

@router.message(choose_mode, F.text == "–£–¥–∞–ª–∏—Ç—å")
async def delete_ride(message: Message, state: FSMContext):
     await state.update_data(choose_mode="delete")
     await state.set_state(EditStates.ride_id)
     await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–µ–∑–¥–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—èüö´", reply_markup=ReplyKeyboardRemove())


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏

@router.message(EditStates.ride_id)
async def process_edit_ride_id(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    try:
        ride_id = int(message.text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–µ–∑–¥–∫–∏ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")
        return

    async with async_session() as session:
        user_rides = await rq.get_user_rides(user_id, session)

        if not user_rides or ride_id < 1 or ride_id > len(user_rides):
            await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–µ–∑–¥–∫–∏.")
            return

        selected_ride = user_rides[ride_id - 1]

        selected_ride_id = selected_ride.ride_id
        await state.update_data(ride_id=selected_ride_id)

        state_data = await state.get_data()
        if state_data["choose_mode"] == "delete":
            await rq.delete_ride(selected_ride_id, session)
            await state.clear()
            await message.answer(f"–ü–æ–µ–∑–¥–∫–∞ –Ω–æ–º–µ—Ä {ride_id} —É–¥–∞–ª–µ–Ω–∞.", reply_markup=kb.main)
        else:
            await state.set_state(EditStates.parameter_to_edit)
            await message.answer(
                "–ö–∞–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ–µ–∑–¥–∫–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å? –í—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é",
                reply_markup=kb.ride_params
            )



@router.message(F.text == "–ú–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è", EditStates.parameter_to_edit)
async def edit_location(message: Message, state: FSMContext):
    await state.set_state(EditStates.location)
    await message.answer("–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É.", reply_markup=kb.location)
    

@router.message(EditStates.location)
async def process_new_location(message: Message, state: FSMContext):
    new_location = (message.location.latitude, message.location.longitude)
    ride_id = (await state.get_data())['ride_id']
    
    async with async_session() as session:
        await rq.update_ride(ride_id, {'location': json.dumps(new_location)}, session, api_key_2gis=API_KEY_2GIS, api_key_geocoder=API_KEY_GEOCODER)
        
    await state.clear()
    await message.answer("–ú–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=kb.main)


@router.message(F.text == "–ú–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è", EditStates.parameter_to_edit)
async def edit_destination(message: Message, state: FSMContext):
    await state.set_state(EditStates.destination)
    await message.answer('–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ üìå, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è" –≤–æ –≤–ª–æ–∂–µ–Ω–∏—è—Ö üìé', reply_markup=ReplyKeyboardRemove())

@router.message(EditStates.destination)
async def process_new_destination(message: Message, state: FSMContext):
    ride_id = (await state.get_data())['ride_id']
    new_destination = (message.location.latitude, message.location.longitude)

    async with async_session() as session:
        await rq.update_ride(ride_id, {'destination': json.dumps(new_destination)}, session, api_key_2gis=API_KEY_2GIS, api_key_geocoder=API_KEY_GEOCODER)
              
    await state.clear()
    await message.answer(f"–ú–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ", reply_markup=kb.main)

    
    
@router.message(F.text == "–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è", EditStates.parameter_to_edit)
async def edit_arrival_time(message: Message, state: FSMContext):
    await state.set_state(EditStates.arrival_time)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è.", reply_markup=ReplyKeyboardRemove())

@router.message(EditStates.arrival_time)
async def process_new_arrival_time(message: Message, state: FSMContext):
        new_arrival_time = message.text
        ride_id = (await state.get_data())['ride_id']
        
        if not rq.validate_arrival_time(new_arrival_time):
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á—á:–º–º.")
            return
        
        async with async_session() as session:
            await rq.update_ride(ride_id, {"arrival_time": rq.parse_time(new_arrival_time)}, session, api_key_2gis=API_KEY_2GIS, api_key_geocoder=API_KEY_GEOCODER)
            
        await state.clear()
        await message.answer("–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=kb.main)


@router.message(F.text == "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ", EditStates.parameter_to_edit)
async def edit_transport(message: Message, state: FSMContext):
    await state.set_state(EditStates.transport)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ", reply_markup=kb.transport_types)

# @router.message(EditStates.transport)
# async def process_new_transport(message: Message, state: FSMContext):
#         new_transport = message.text
#         ride_id = (await state.get_data())['ride_id']
        
#         async with async_session() as session:
#             await rq.update_ride(ride_id, {'transport': new_transport}, session)
            
#         await state.clear()
#         await message.answer("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=kb.main)

@router.message(EditStates.transport)
async def process_new_transport(message: Message, state: FSMContext):
        new_transport = message.text
        ride_id = (await state.get_data())['ride_id']

        async with async_session() as session:
            await rq.update_ride(ride_id, {'transport': message.text}, session, api_key_2gis=API_KEY_2GIS, api_key_geocoder=API_KEY_GEOCODER)
            
        await state.clear()
        await message.answer("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=kb.main)


@router.message(F.text == "–í—Ä–µ–º—è –¥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", EditStates.parameter_to_edit)
async def edit_notify_time_delta(message: Message, state: FSMContext):
    await state.set_state(EditStates.notify_time_delta)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", reply_markup=ReplyKeyboardRemove())

@router.message(EditStates.notify_time_delta)
async def process_new_notify_time_delta(message: Message, state: FSMContext):
        try:
            notify_time_delta = int(message.text)
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç.")
            return
        
        ride_id = (await state.get_data())["ride_id"]

        async with async_session() as session:
            await rq.update_ride(ride_id, {"notify_time_delta": notify_time_delta}, session, api_key_2gis=API_KEY_2GIS, api_key_geocoder=API_KEY_GEOCODER)

        await state.clear()
        await message.answer("–í—Ä–µ–º—è –¥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=kb.main)



#
# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–µ–∑–¥–∫–∏
#



@router.message(F.text == "–ù–æ–≤–∞—è –ø–æ–µ–∑–¥–∫–∞")
async def cmd_new_ride(message: Message, state: FSMContext):
    await state.set_state(NewRideStates.location)
    await message.answer("–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–Ω–∞—Ç—å —Ç–æ—á–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è ‚è´", reply_markup=kb.location)


@router.message(NewRideStates.location)
async def process_location(message: Message, state: FSMContext):
    latitude = message.location.latitude
    longitude = message.location.longitude
    
    location_text = api.get_address_from_coordinates(API_KEY_GEOCODER, latitude, longitude)
    await state.update_data(location=(latitude, longitude), location_text=location_text)

    await state.set_state(NewRideStates.destination_input)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è‚è¨ –æ–¥–∏–º –∏–∑ –¥–≤—É—Ö —Å–ø–æ—Å–æ–±–æ–≤:", reply_markup=kb.destination)


@router.message(NewRideStates.destination_input, F.text == "–¢–æ—á–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–µ")
async def process_destination_input(message: Message, state: FSMContext):
    await state.update_data(destination_input="location")

    await state.set_state(NewRideStates.destination)
    await message.answer('–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ üìå, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è" –≤–æ –≤–ª–æ–∂–µ–Ω–∏—è—Ö üìé',
                         reply_markup=ReplyKeyboardRemove())


@router.message(NewRideStates.destination_input, F.text == "–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é")
async def process_destination_input(message: Message, state: FSMContext):
    await state.update_data(destination_input="text")

    await state.set_state(NewRideStates.destination)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è ‚è¨",
                         reply_markup=ReplyKeyboardRemove())

@router.message(NewRideStates.destination)
async def process_destination(message: Message, state: FSMContext):
    state_data = await state.get_data()
    destination_input = state_data["destination_input"]
    if destination_input == "location":
        latitude = message.location.latitude
        longitude = message.location.longitude
        destination_text = api.get_address_from_coordinates(API_KEY_GEOCODER, latitude, longitude)
        await state.update_data(destination=(latitude, longitude), destination_text=destination_text)
    elif destination_input == "text":
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        longitude, latitude = api.get_coordinates(API_KEY_GEOCODER, message.text)
        destination_text = message.text 
        await state.update_data(destination=(latitude, longitude), destination_text=destination_text)
    
    await state.set_state(NewRideStates.arrival_time)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è üïë. –ï—Å–ª–∏ –ø–æ–µ–∑–¥–∫–∞ —Å–æ—Å—Ç–æ–∏—Ç—Å—è –Ω–µ —Å–µ–≥–æ–¥–Ω—è, —Ç–æ —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ú–ú.–î–î —á—á:–º–º" (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.02 20:00)')


@router.message(NewRideStates.arrival_time)
async def process_arrival_time(message: Message, state: FSMContext):
    arrival_time_str = message.text

    try:
        arrival_time = rq.parse_time(arrival_time_str)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á—á:–º–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)")
        return
    # if not rq.validate_arrival_time(arrival_time_str):
    #     await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á—á:–º–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)")
    #     return  
    
    # await state.update_data(arrival_time=arrival_time_str)
    await state.update_data(arrival_time=arrival_time)
    await state.set_state(NewRideStates.transport)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ üõû", reply_markup=kb.transport_types)


@router.message(NewRideStates.transport)
async def process_transport(message: Message, state: FSMContext):
    if message.text == "–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        transport_type = "public_transport"
    elif message.text == "–ê–≤—Ç–æ–º–æ–±–∏–ª—å":
        transport_type = "car"
    elif message.text == "–ü–µ—à–∫–æ–º":
        transport_type = "walk"
    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", reply_markup=kb.transport_types)
        return
    await state.update_data(transport=message.text, transport_api_format=transport_type)
    await state.set_state(NewRideStates.notify_time_delta)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è (–≤ –º–∏–Ω—É—Ç–∞—Ö) –¥–æ –≤—ã—Ö–æ–¥–∞ –í–∞—Å —É–≤–µ–¥–æ–º–∏—Ç—å?", reply_markup=ReplyKeyboardRemove())


@router.message(NewRideStates.notify_time_delta)
async def process_notify_time_delta(message: Message, state: FSMContext, scheduler: AsyncIOScheduler, bot: Bot):
    await state.update_data(notify_time_delta=message.text)
    state_data = await state.get_data()
    route_info = api.calc_time(API_KEY_2GIS, state_data["location"], state_data["destination"], state_data["transport_api_format"])
    logging.info(route_info)
    
    await state.update_data(
        ride_time=route_info.get("total_duration"),
        path=route_info.get("path")
    )    
    state_data = await state.get_data() 
    user_id = message.from_user.id
    
    async with async_session() as session:
        async with session.begin():
            await rq.add_ride(user_id, state_data, session=session, api_key_2gis=API_KEY_2GIS)

    await state.clear()

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    logging.info(state_data["arrival_time"])
    notify_time = calc_notification_time(state_data["arrival_time"], int(state_data["ride_time"]), int(state_data["notify_time_delta"]), 10)
    logging.info(notify_time)
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.add_job(
            send_scheduled_message,
            "date",  # –¢–∏–ø –∑–∞–¥–∞—á–∏ ‚Äî –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –∑–∞–¥–∞—á–∞
            run_date=notify_time,
            args=(bot, message.chat.id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–µ–∑–¥–∫–µ {state_data['destination_text']}"),
    )

    await message.answer(
        "–ü–æ–µ–∑–¥–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {notify_time}\n\n"
        f"‚è´ –ú–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {state_data['location_text']}\n"
        f"‚è¨ –ú–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {state_data['destination_text']}\n"
        f"üïë –í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è: {state_data['arrival_time']}\n"
        f"üõû –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ: {state_data['transport']}\n"
        f"üîî –í—Ä–µ–º—è –¥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {state_data['notify_time_delta']} –º–∏–Ω—É—Ç(—ã)\n"
        f"üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç: {state_data.get('path', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"‚åõ –î–æ—Ä–æ–≥–∞ –∑–∞–π–º–µ—Ç: {state_data['ride_time']} –º–∏–Ω—É—Ç.",
        reply_markup=kb.main
    )



@router.message(F.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def cmd_settings(message: Message, state: FSMContext):
    user_id = message.from_user.id

    async with async_session() as session:
        user_settings = await rq.get_user_settings(user_id, session)
    await state.set_state(choose_notification_buffer)
    await message.answer(f"–ó–∞–ø–∞—Å –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–µ–∑–¥–∫–∏: {user_settings}%.\n–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ %")


@router.message(choose_notification_buffer)
async def cmd_change_settings(message: Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        new_notification_buffer = int(message.text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return
    async with async_session() as session:
        await rq.set_user_settings(user_id, new_notification_buffer, session)

    await state.clear()
    await message.answer("–ù–æ–≤—ã–π –∑–∞–ø–∞—Å –≤—Ä–µ–º–µ–Ω–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!", reply_markup=kb.main)


@router.message()
async def unknown_command(message: Message):
    await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—Éü§î. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é.", reply_markup=kb.main)



